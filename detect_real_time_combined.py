{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c9b53463-5340-4a7c-9450-fa2feb4b4bdc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import mediapipe as mp\n",
    "import numpy as np\n",
    "import joblib\n",
    "\n",
    "# Load models and scalers\n",
    "face_model = joblib.load('face_model.pkl')\n",
    "face_scaler = joblib.load('face_model_scaler.pkl')\n",
    "hand_model = joblib.load('hand_model.pkl')\n",
    "hand_scaler = joblib.load('hand_model_scaler.pkl')\n",
    "\n",
    "mp_face = mp.solutions.face_mesh.FaceMesh()\n",
    "mp_hand = mp.solutions.hands.Hands(max_num_hands=1)\n",
    "mp_draw = mp.solutions.drawing_utils\n",
    "\n",
    "cap = cv2.VideoCapture(0)\n",
    "\n",
    "while True:\n",
    "    ret, frame = cap.read()\n",
    "    if not ret:\n",
    "        print(\"Failed to grab frame\")\n",
    "        break\n",
    "\n",
    "    frame = cv2.flip(frame, 1)\n",
    "    rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n",
    "\n",
    "    face_result = mp_face.process(rgb)\n",
    "    hand_result = mp_hand.process(rgb)\n",
    "\n",
    "    face_label = None\n",
    "    hand_label = None\n",
    "\n",
    "    # Face landmarks and prediction\n",
    "    if face_result.multi_face_landmarks:\n",
    "        face_landmarks = face_result.multi_face_landmarks[0].landmark\n",
    "        face_input = np.array([[lm.x, lm.y] for lm in face_landmarks]).flatten().reshape(1, -1)\n",
    "        face_input_scaled = face_scaler.transform(face_input)\n",
    "        face_label = face_model.predict(face_input_scaled)[0]\n",
    "        mp_draw.draw_landmarks(frame, face_result.multi_face_landmarks[0], mp.solutions.face_mesh.FACEMESH_CONTOURS)\n",
    "\n",
    "    # Hand landmarks and prediction\n",
    "    if hand_result.multi_hand_landmarks:\n",
    "        hand_landmarks = hand_result.multi_hand_landmarks[0].landmark\n",
    "        hand_input = np.array([[lm.x, lm.y] for lm in hand_landmarks]).flatten().reshape(1, -1)\n",
    "        hand_input_scaled = hand_scaler.transform(hand_input)\n",
    "        hand_label = hand_model.predict(hand_input_scaled)[0]\n",
    "        mp_draw.draw_landmarks(frame, hand_result.multi_hand_landmarks[0], mp.solutions.hands.HAND_CONNECTIONS)\n",
    "\n",
    "    # Build output sentence\n",
    "    sentence = \"\"\n",
    "    if face_label and hand_label:\n",
    "        sentence = f\"You show {face_label} expression and {hand_label} gesture\"\n",
    "    elif face_label:\n",
    "        sentence = f\"You show {face_label} expression\"\n",
    "    elif hand_label:\n",
    "        sentence = f\"You show {hand_label} gesture\"\n",
    "\n",
    "    if sentence:\n",
    "        cv2.putText(frame, sentence, (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0,0,255), 1)\n",
    "\n",
    "    cv2.imshow(\"Real-Time Face & Hand Gesture Detection\", frame)\n",
    "\n",
    "    if cv2.waitKey(1) & 0xFF == ord('q'):\n",
    "        break\n",
    "\n",
    "cap.release()\n",
    "cv2.destroyAllWindows()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "34503437-8085-435c-bf91-38224fec2e3e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "291b82ed-3d6a-495f-8e73-c8ea70a9908b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
